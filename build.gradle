import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils
import org.apache.commons.io.filefilter.TrueFileFilter

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:4.+"
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "idea"
apply plugin: "maven-publish"

version = "1.0"
group = "wormz.fatweaks"

compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8"

minecraft {
    mappings channel: "stable", version: "39-1.12"

    runs {
        client {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                fatweaks {
                    source sourceSets.main
                }
            }
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                fatweaks {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "jei"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to"
    }
    maven {
        name = "jared"
        url = "http://maven.blamejared.com"
    }
    maven {
        url "http://maven.tterrag.com/"
    }
    maven {
        url "https://dl.bintray.com/way2muchnoise/dev"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2854"

    implementation "org.spongepowered:mixin:0.8.+"
    annotationProcessor "org.spongepowered:mixin:0.8.+:processor"

    implementation "curse.maven:mixinBooter-419286:3109196"
    implementation "net.industrial-craft:industrialcraft-2:2.8.202-ex112"
    implementation "curse.maven:industrialWires-251121:2664750"
    implementation "curse.maven:advancedMachines-251205:2667002"
    implementation fg.deobf("curse.maven:customOreGen-237130:2568549")
    implementation "jeresources:JustEnoughResources-1.12.2:0.9.2.60"

    runtimeOnly "blusunrize:ImmersiveEngineering:0.12-+"
    runtimeOnly "mezz.jei:jei_1.12.2:4.15.0.293"
    runtimeOnly "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.28-17"
}

mixin {
    add sourceSets.main, "main.refmap.json"
}

jar {
    manifest {
        attributes([
                "Specification-Title"        : "SmallFix,FATweaker",
                "Specification-Vendor"       : "Windmill_City,Wormzjl",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : "${version}",
                "Implementation-Vendor"      : "Windmill_City,Wormz",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePlugin"              : "wormz.fatweaks.ASM.FATCore",
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod"             : true
        ])
    }
}

jar.finalizedBy("reobfJar")

class MakeATsTask extends DefaultTask {
    @Input
    FileCollection runtimeLibraries
    @OutputDirectories
    File dirATs

    String FILENAME_AT = "accesstransformer.cfg"

    MakeATsTask() {
        runtimeLibraries = project.configurations["runtimeClasspath"].filter {
            !it.name.startsWith("forge")
        }
        dirATs = new File("$project.buildDir/generatedATs")
    }

    @TaskAction
    def makeAT() {
        project.delete(dirATs)//Clean first
        runtimeLibraries.forEach {
            project.zipTree(it).filter { content ->
                content.name.endsWith("_at.cfg")
            }.forEach { at ->
                println("Found AccessTransFormer: ${at.name} in ${it.name}")
                project.copy {
                    from(at)
                    into(project.file("$dirATs/${at.name.substring(0, at.name.lastIndexOf("."))}"))
                    rename {
                        FILENAME_AT
                    }
                }
            }
        }
    }
}

task "transformAccessTransformer"(type: MakeATsTask) {
    group = "access_transformer"

    if (dirATs.exists())
        minecraft.accessTransformers.addAll(FileUtils.listFiles(
                dirATs,
                FileFilterUtils.nameFileFilter(FILENAME_AT),
                TrueFileFilter.INSTANCE))
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
